#!/usr/bin/env python3
"""
Script de setup para o cliente DVD API
"""

import subprocess
import sys
import os

def verificar_python():
    """Verifica se o Python est√° instalado"""
    print("Verificando vers√£o do Python...")
    try:
        version = sys.version_info
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} encontrado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar Python: {e}")
        return False

def instalar_dependencias():
    """Instala as depend√™ncias do projeto"""
    print("\nInstalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå pip n√£o encontrado. Verifique se o Python est√° instalado corretamente.")
        return False

def testar_tkinter():
    """Testa se o tkinter est√° dispon√≠vel"""
    print("\nTestando tkinter...")
    try:
        import tkinter
        print("‚úÖ tkinter est√° dispon√≠vel")
        return True
    except ImportError:
        print("‚ùå tkinter n√£o est√° dispon√≠vel")
        print("   No Ubuntu/Debian: sudo apt-get install python3-tk")
        print("   No CentOS/RHEL: sudo yum install tkinter")
        print("   No macOS: tkinter vem com o Python")
        return False

def criar_arquivo_config():
    """Cria um arquivo de configura√ß√£o de exemplo"""
    config_content = """# Configura√ß√£o da API DVD
# Substitua pelos seus valores reais

API_KEY = "SUA_API_KEY_AQUI"
BASE_URL = "https://sum.natsec.bot/api"

# Exemplo de uso:
# from dvd_api_client import DVDAPIClient
# client = DVDAPIClient(API_KEY, BASE_URL)
# status = client.check_status()
"""
    
    try:
        with open("config.py", "w", encoding="utf-8") as f:
            f.write(config_content)
        print("‚úÖ Arquivo config.py criado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar config.py: {e}")
        return False

def mostrar_instrucoes():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "="*60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA!")
    print("="*60)
    
    print("\nüìã COMO USAR:")
    print("\n1. Interface Gr√°fica (Recomendado):")
    print("   python dvd_api_client.py")
    
    print("\n2. Linha de Comando:")
    print("   python simple_client.py status SUA_API_KEY")
    print("   python simple_client.py domain SUA_API_KEY exemplo.com.br")
    
    print("\n3. Teste de Conectividade:")
    print("   python teste_conexao.py SUA_API_KEY")
    
    print("\n4. Exemplos de Uso:")
    print("   python exemplo_uso.py")
    
    print("\nüìÅ ARQUIVOS CRIADOS:")
    print("   - dvd_api_client.py: Cliente com interface gr√°fica")
    print("   - simple_client.py: Cliente de linha de comando")
    print("   - teste_conexao.py: Script de teste")
    print("   - exemplo_uso.py: Exemplos de uso")
    print("   - config.py: Arquivo de configura√ß√£o")
    print("   - requirements.txt: Depend√™ncias")
    print("   - README.md: Documenta√ß√£o completa")
    
    print("\n‚ö†Ô∏è  PR√ìXIMOS PASSOS:")
    print("1. Certifique-se de que a API est√° rodando em https://sum.natsec.bot")
    print("2. Substitua 'SUA_API_KEY_AQUI' pela sua API Key real")
    print("3. Execute 'python teste_conexao.py SUA_API_KEY' para testar")
    print("4. Execute 'python dvd_api_client.py' para usar a interface gr√°fica")
    
    print("\nüìñ DOCUMENTA√á√ÉO:")
    print("   Leia o arquivo README.md para instru√ß√µes detalhadas")
    
    print("\n" + "="*60)

def main():
    """Fun√ß√£o principal do setup"""
    print("üöÄ Setup do Cliente DVD API")
    print("="*40)
    
    # Verificar Python
    if not verificar_python():
        print("‚ùå Python n√£o encontrado. Instale o Python 3.7+ primeiro.")
        return False
    
    # Instalar depend√™ncias
    if not instalar_dependencias():
        print("‚ùå Falha ao instalar depend√™ncias.")
        return False
    
    # Testar tkinter
    if not testar_tkinter():
        print("‚ö†Ô∏è  tkinter n√£o est√° dispon√≠vel. A interface gr√°fica pode n√£o funcionar.")
    
    # Criar arquivo de configura√ß√£o
    criar_arquivo_config()
    
    # Mostrar instru√ß√µes
    mostrar_instrucoes()
    
    return True

if __name__ == "__main__":
    try:
        sucesso = main()
        if sucesso:
            print("\n‚úÖ Setup conclu√≠do com sucesso!")
        else:
            print("\n‚ùå Setup falhou. Verifique os erros acima.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nSetup cancelado pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1) 